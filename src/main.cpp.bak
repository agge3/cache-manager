/**
 * @file main.cpp
 *
 * @author Tyler Baxter
 * @version 1.0
 * @since 2024-08-30
 *
 * Main entry point. Test cases.
 */

#include "linked-list.h"
#include "bst.h"

#include <iostream>
#include <memory>
#include <cassert>
#include <vector>
#include <random>
#include <sstream>
#include <string>

// Anonymous namespace to trap the globals in this file's scope.
namespace {
	/**
	 * Function to generate 'n' random numbers within a specified range.
	 *
	 * CREDIT: OpenAI's ChatGPT
	 * PROMPT: in cpp give me a random number generator that generates n numbers
	 */
	std::vector<int> generateRandomNumbers(int n, int min, int max) {
	    std::vector<int> numbers;

	    // Create a random number generator with a random device seed
	    std::random_device rd;
	    std::mt19937 gen(rd()); // Mersenne Twister engine

	    // Define the range for the random numbers
	    std::uniform_int_distribution<> dis(min, max);

	    // Generate 'n' random numbers
	    for (int i = 0; i < n; ++i) {
	        numbers.push_back(dis(gen));
	    }

	    return numbers;
	}

	/**
	 * @struct Dataset
     * A struct to carry constants for the randomly generated data: the amount
	 * of data points, the minimum value, and the maximum value.
     */
	struct Dataset {
		int amt = 10;
		int min = 0;
		int max = 10;
	};
}

// xxx remove global, put into a namespace or class
void testSLL()
{
	std::unique_ptr<csc::LinkedList> list(new csc::LinkedList());
	std::unique_ptr<Dataset> dataset(new Dataset);
	std::unique_ptr<std::vector<int>> data = std::make_unique<std::vector<int>>(
	    generateRandomNumbers(dataset->amt, dataset->min, dataset->max)
	);

	// Unit tests:
	for (auto i = 0; i < 5; ++i) {
		list->insertAtBeginning(data->at(i));
		assert(list->get(0) == data->at(i));
		std::cout << "insertAtBeginning() passed. List head: " << list->get(0) <<
			"\n";
	}

	for (auto i = 5; i < 10; ++i) {
		list->insertAtEnd(data->at(i));
		assert(list->get(i) == data->at(i));
		std::cout << "insertAtEnd() passed. List index " << i << ": " <<
			list->get(i) << "\n";
	}

	try {
		list->get(-1);
	} catch (const std::out_of_range& e) {
		std::cout << "Out of range exception passed. " << e.what() << "\n";
	}

	try {
		list->get(11);
	} catch (const std::out_of_range& e) {
		std::cout << "Out of range exception passed. " << e.what() << "\n";
	}

	list->deleteNode(data->at(8));
	assert(list->get(8) != data->at(8));
	std::cout << "deleteNode() passed. Deleted: " << data->at(8) << "\n";

	// Print final list:
	// Push a newline to separate final list output for unit tests.
	std::cout << "\n";
	std::cout << "List: ";
	list->printList();

	// Cleanup:
	list.reset();
	dataset.reset();
	data.reset();

	// Stress tests:
	// Push a newline to separate stress testing from final list output.
	std::cout << "\n";
	std::cout << "Stress testing...\n";
	auto stress_test = []() {
		std::unique_ptr<csc::LinkedList> list(new csc::LinkedList());
		std::unique_ptr<Dataset> dataset(new Dataset);
		std::unique_ptr<std::vector<int>> data =
			std::make_unique<std::vector<int>>(
			generateRandomNumbers(dataset->amt, dataset->min, dataset->max)
		);
		for (auto i = 0; i < 5; ++i) {
			list->insertAtBeginning(data->at(i));
			assert(list->get(0) == data->at(i));
		}
		for (auto i = 5; i < 10; ++i) {
			list->insertAtEnd(data->at(i));
			assert(list->get(i) == data->at(i));
		}
		try {
			list->get(-1);
		} catch (const std::out_of_range& e) {
			// Do nothing; catching the exception is what we want.
		}
		try {
			list->get(11);
		} catch (const std::out_of_range& e) {
			// Do nothing; catching the exception is what we want.
		}
		list->deleteNode(data->at(8));
		assert(list->get(8) != data->at(8));
		list.reset();
		dataset.reset();
		data.reset();
	};
	for (int i = 0; i < 100; ++i) {
		stress_test;
	}
	std::cout << "Stress testing passed! 100 iterations passed." << std::endl;
}

// xxx remove global, put into a namespace or class
void testBST()
{
    auto tree = std::make_unique<BST>();

    // helper lambda to display binary search tree. capture tree's pointer
    auto display = [&tree]() {
        std::cout << "BINARY SEARCH TREE:\n";
        std::cout << "Inorder:\n";
        tree->display();
        std::cout << "\nPostorder:\n";
        tree->rdisplay();
        // push a newline
        std::cout << "\n";
    };

    std::cout << "Enter data to insert into the binary search tree " <<
        "(press ENTER to stop entering data):\n";

    std::string line;
    int value;

    std::getline(std::cin, line);
    std::istringstream stream(line);
    while (stream >> value) {
        tree->insert(new Node(value));
    }
    stream.clear();
    // push a newline
    std::cout << "\n";

    display();

    std::cout << "Enter the data to search for (integer):\n";
    std::getline(std::cin, line);
    stream.str(line);
    // push a newline
    std::cout << "\n";

    if (stream >> value && tree->search(value))
        std::cout << "Data found!\n";
    else
        std::cout << "Data not found!\n";
    stream.clear();
    // push a newline
    std::cout << "\n";

    std::cout << "Enter data to remove from the binary search tree, " <<
        "or nothing to not remove any data " <<
        "(press ENTER to stop removing data):\n";

    std::getline(std::cin, line);
    stream.str(line);
    while (stream >> value) {
        tree->remove(value);
    }
    stream.clear();
    // push a newline
    std::cout << "\n";

    display();
}

/**
* Unit tests for Node.
*
* @credit OpenAI's ChatGPT
* Prompt: "Write me test cases for this class, with no frameworks, in cpp."
*/
void testNode()
{
    // Test Node creation
    Node node1(10);
    assert(node1.get_element() == 10);
    assert(node1.get_next() == nullptr);
    assert(node1.get_prev() == nullptr);

    // Test setting and getting elements
    node1.set_element(20);
    assert(node1.get_element() == 20);

    // Test setting and getting next and previous nodes
    Node node2(30);
    node1.set_next(&node2);
    node2.set_prev(&node1);
    assert(node1.get_next() == &node2);
    assert(node2.get_prev() == &node1);
}

/**
* Unit tests for List.
*
* @credit OpenAI's ChatGPT
* Prompt: "Write me test cases for this class, with no frameworks, in cpp."
*/
void testList()
{
    List list;

    // Test empty list
    assert(list.empty() == true);
    assert(list.size() == 0);

    // Test push_front and push_back
    list.push_front(1);
    assert(list.front() == 1);
    assert(list.back() == 1);
    assert(list.size() == 1);

    list.push_back(2);
    assert(list.front() == 1);
    assert(list.back() == 2);
    assert(list.size() == 2);

    // Test insert
    list.insert(3, 1); // Insert 3 at index 1
    assert(list.get(0) == 1);
    assert(list.get(1) == 3);
    assert(list.get(2) == 2);
    assert(list.size() == 3);

    // Test remove
    assert(list.remove(3) == true);
    assert(list.get(1) == 2);
    assert(list.size() == 2);

    // Test pop_front and pop_back
    list.pop_front();
    assert(list.front() == 2);
    assert(list.size() == 1);

    list.pop_back();
    assert(list.empty() == true);
    assert(list.size() == 0);

    // Test exception handling for empty list
    try {
        list.front(); // should throw exception
        assert(false); // Should not reach this line
    } catch (const std::out_of_range&) {
        // Expected exception
    }

    try {
        list.back(); // should throw exception
        assert(false); // Should not reach this line
    } catch (const std::out_of_range&) {
        // Expected exception
    }

    // Test clear (Already tested above but can be rechecked)
    list.push_front(4);
    list.push_back(5);
    list.clear();
    assert(list.empty() == true);
    assert(list.size() == 0);

    // Test copy constructor
    list.push_front(6);
    list.push_back(7);
    List listCopy(list);
    assert(listCopy.front() == 6);
    assert(listCopy.back() == 7);
    assert(listCopy.size() == 2);

    // Test copy assignment operator
    List listAssigned;
    listAssigned = list;
    assert(listAssigned.front() == 6);
    assert(listAssigned.back() == 7);
    assert(listAssigned.size() == 2);

    // Test move constructor
    List listMoved(std::move(list));
    assert(listMoved.front() == 6);
    assert(listMoved.back() == 7);
    assert(listMoved.size() == 2);
    assert(list.empty() == true); // Ensure list is empty after move

    // Test move assignment operator
    List listMovedAssign;
    listMovedAssign = std::move(listAssigned);
    assert(listMovedAssign.front() == 6);
    assert(listMovedAssign.back() == 7);
    assert(listMovedAssign.size() == 2);
    assert(listAssigned.empty() == true); // Ensure listAssigned is empty after move

    // Test unique_ptr functions (begin and end)
    std::unique_ptr<Node> beginNode = listMoved.begin();
    assert(beginNode->get_element() == 6);
    std::unique_ptr<Node> endNode = listMoved.end();
    assert(endNode->get_element() == 7);

    // Test contains
    assert(listMoved.contains(6) == true);
    assert(listMoved.contains(8) == false);
}

/**
* Unit tests for HashMap.
*
* @credit OpenAI's ChatGPT
* Prompt: "Write me test cases for this class, with no frameworks, in cpp."
*/
void testHashMap()
{
    // Create a HashMap instance
    HashMap map;

    // Test empty map
    assert(map.empty() == true);
    assert(map.size() == 0);

    // Test insertion
    map.insert(1, 100);
    assert(map.size() == 1);
    assert(map.contains_key(1) == true);
    assert(map.contains_value(100) == true);

    // Test get value
    assert(map.get(1) == 100);

    // Test insertion of another element
    map.insert(2, 200);
    assert(map.size() == 2);
    assert(map.contains_key(2) == true);
    assert(map.contains_value(200) == true);

    // Test replacing a value
    map.replace(1, 150);
    assert(map.get(1) == 150);

    // Test replace with old_value match
    map.replace(2, 200, 250);
    assert(map.get(2) == 250);
    assert(map.contains_value(200) == false);

    // Test remove by key
    assert(map.remove(1) == 150);
    assert(map.contains_key(1) == false);
    assert(map.size() == 1);

    // Test remove by key and value
    map.insert(3, 300);
    map.insert(4, 300); // Adding duplicate value
    assert(map.remove(4, 300) == true);
    assert(map.contains_key(4) == false);
    assert(map.contains_value(300) == true);
    assert(map.size() == 2); // size should be 2 after removing one element

    // Test clear
    map.clear();
    assert(map.empty() == true);
    assert(map.size() == 0);

    // Test remove from empty map
    try {
        map.remove(10);
        std::cerr << "Expected exception not thrown\n";
    } catch (...) {
        // Expected behavior
    }

    try {
        map.get(10);
        std::cerr << "Expected exception not thrown\n";
    } catch (...) {
        // Expected behavior
    }

    try {
        map.remove(10, 100);
        std::cerr << "Expected exception not thrown\n";
    } catch (...) {
        // Expected behavior
    }

    // Test move operations (if implemented)
    HashMap map2;
    map2.insert(5, 500);
    HashMap map3(std::move(map2));
    assert(map3.get(5) == 500);
    assert(map2.empty() == true);

    HashMap map4;
    map4.insert(6, 600);
    map4 = std::move(map3);
    assert(map4.get(5) == 500);
    assert(map3.empty() == true);

    std::cout << "All tests passed!" << std::endl;
}

int main()
{
	testSLL();
	testBST();
	testNode();
	testList();
	testHashMap();
}
